#! /bin/bash

FULL_BUNDLING=0

PREFIX=yyy

# Move blacklisted files to a special folder
move_blacklisted()
{
  mkdir -p ./usr/lib-blacklisted
if [ x"$FULL_BUNDLING" = "x1" ]; then
  BLACKLISTED_FILES=$(cat $APPIMAGEBASE/AppImages/excludelist | sed '/^\s*$/d' | sed '/^#.*$/d')
else
  #BLACKLISTED_FILES=$(wget -q https://github.com/probonopd/AppImages/raw/master/excludelist -O - | sed '/^\s*$/d' | sed '/^#.*$/d')
  BLACKLISTED_FILES=$(cat "$APPIMAGEBASE/excludelist" | sed '/^\s*$/d' | sed '/^#.*$/d')
fi
  echo $BLACKLISTED_FILES
  for FILE in $BLACKLISTED_FILES ; do
    FOUND=$(find . -type f -name "${FILE}" 2>/dev/null)
    if [ ! -z "$FOUND" ] ; then
      echo "Moving blacklisted ${FOUND}"
      #rm -f "${FOUND}"
      mv "${FOUND}" ./usr/lib-blacklisted
    fi
  done
}


fix_pango()
{
    
    version=$(pango-querymodules --version | tail -n 1 | tr -d " " | cut -d':' -f 2)
    cat /$PREFIX/lib/pango/$version/modules.cache | sed "s|/$PREFIX/lib/pango/$version/modules/||g" > usr/lib/pango/$version/modules.cache
}


export APPIMAGEBASE=$(pwd)
wget -q https://github.com/probonopd/AppImages/raw/master/functions.sh -O ./functions.sh
. ./functions.sh
#. ./functions-local.sh

#cat_file_from_url https://github.com/probonopd/AppImages/raw/master/excludelist | sed '/^\s*$/d' | sed '/^#.*$/d' > blacklisted

APP=rapid-photo-downloader
VERSION=0.9.0b6
LOWERAPP=${APP,,} 

rm -rf out $APP

WD=$(pwd)

(cd appimage-exec-wrapper && make && cp -a exec.so /$PREFIX/lib/exec_wrapper.so)

export PATH=/$PREFIX/bin:$PATH
export LD_LIBRARY_PATH=/$PREFIX/lib:$LD_LIBRARY_PATH
export XDG_DATA_DIRS=/$PREFIX/share:$XDG_DATA_DIRS
export PKG_CONFIG_PATH=/$PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH


pwd

mkdir -p $APP/$APP.AppDir
cd $APP/$APP.AppDir
mkdir -p usr/bin
cp -a /$PREFIX/bin/$LOWERAPP usr/bin
cp -a /$PREFIX/bin/python* usr/bin
cp -a /$PREFIX/bin/exiftool usr/bin
cp -a $(which perl) usr/bin

#mkdir -p usr/lib
cp -a /$PREFIX/lib usr
cp -a /$PREFIX/libexec usr
cp -a /$PREFIX/etc usr
cp -a /$PREFIX/share usr
cp -a /$PREFIX/plugins usr
mkdir -p usr/share
cp -a /usr/share/mime usr/share

PERL_VERSION=$(perl -e 'print substr($^V, 1)')
mkdir -p usr/share/perl/${PERL_VERSION}
PERL_INC=$(perl -le "print foreach @INC")
for d in $PERL_INC; do
    if [ -e "$d" -a ! x"$d"y = "x.y" ]; then
	echo "cp -a \"$d\"/* usr/share/perl/${PERL_VERSION}"
	cp -a "$d"/* usr/share/perl/${PERL_VERSION}
    fi
done



#get_apprun
cp -a ../../AppRun-custom AppRun

# The original desktop file is a bit strange, hence we provide our own
cat > $LOWERAPP.desktop <<\EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=GIMP AppImage
GenericName=Image Editor
Comment=Create images and edit photographs
Exec=LOWERAPP %f
TryExec=LOWERAPP
Icon=LOWERAPP
Terminal=false
Categories=Graphics;2DGraphics;RasterGraphics;GTK;
StartupNotify=true
MimeType=image/bmp;image/g3fax;image/gif;image/x-fits;image/x-pcx;image/x-portable-anymap;image/x-portable-bitmap;image/x-portable-graymap;image/x-portable-pixmap;image/x-psd;image/x-sgi;image/x-tga;image/x-xbitmap;image/x-xwindowdump;image/x-xcf;image/x-compressed-xcf;image/x-gimp-gbr;image/x-gimp-pat;image/x-gimp-gih;image/tiff;image/jpeg;image/x-psp;image/png;image/x-icon;image/x-exr;image/svg+xml;image/x-wmf;image/jp2;image/jpeg2000;image/jpx;image/x-xcursor;image/x-3fr;image/x-adobe-dng;image/x-arw;image/x-bay;image/x-canon-cr2;image/x-canon-crw;image/x-cap;image/x-cr2;image/x-crw;image/x-dcr;image/x-dcraw;image/x-dcs;image/x-dng;image/x-drf;image/x-eip;image/x-erf;image/x-fff;image/x-fuji-raf;image/x-iiq;image/x-k25;image/x-kdc;image/x-mef;image/x-minolta-mrw;image/x-mos;image/x-mrw;image/x-nef;image/x-nikon-nef;image/x-nrw;image/x-olympus-orf;image/x-orf;image/x-panasonic-raw;image/x-pef;image/x-pentax-pef;image/x-ptx;image/x-pxn;image/x-r3d;image/x-raf;image/x-raw;image/x-rw2;image/x-rwl;image/x-rwz;image/x-sigma-x3f;image/x-sony-arw;image/x-sony-sr2;image/x-sony-srf;image/x-sr2;image/x-srf;image/x-x3f;
EOF
sed -i -e "s|LOWERAPP|$LOWERAPP|g" $LOWERAPP.desktop

# Copy in the indirect dependencies
copy_deps ; copy_deps ; copy_deps # Three runs to ensure we catch indirect ones

#exit

cp -a $PREFIX/lib/* usr/lib
cp -a $PREFIX/lib64/* usr/lib64
rm -rf $PREFIX

ls usr/lib
move_lib
echo "After move_lib"
ls usr/lib

#delete_blacklisted
move_blacklisted

#cp -a /$PREFIX/lib/libatk-bridge* usr/lib
#cp -a /$PREFIX/lib/libatspi.* usr/lib

cp -a ../../appimage-exec-wrapper/exec.so usr/lib


#fix_pango

# patch_usr
# Patching only the executable files seems not to be enough for darktable
find usr/ -type f -exec sed -i -e "s|/$PREFIX|././|g" {} \;
find usr/ -type f -exec sed -i -e "s|/usr|././|g" {} \;

# The fonts configuration should not be patched, copy back original one
cp /$PREFIX/etc/fonts/fonts.conf usr/etc/fonts/fonts.conf

find ./usr/share/icons -path *24* -name $LOWERAPP.png -exec cp {} $LOWERAPP.png  \; || true
find ./usr/share/icons -path *48* -name $LOWERAPP.png -exec cp {} $LOWERAPP.png  \; || true
find ./usr/share/icons -path *256* -name $LOWERAPP.png -exec cp {} $LOWERAPP.png  \; || true
find ./usr/share/icons -path *512* -name $LOWERAPP.png -exec cp {} $LOWERAPP.png  \; || true


# Workaround for:
# GLib-GIO-ERROR **: Settings schema 'org.gtk.Settings.FileChooser' is not installed
# when trying to use the file open dialog
# AppRun exports usr/share/glib-2.0/schemas/ which might be hurting us here
#( mkdir -p usr/share/glib-2.0/schemas/ ; cd usr/share/glib-2.0/schemas/ ; ln -s /usr/share/glib-2.0/schemas/gschemas.compiled . )

# Workaround for:
# ImportError: /usr/lib/x86_64-linux-gnu/libgdk-x11-2.0.so.0: undefined symbol: XRRGetMonitors
cp $(ldconfig -p | grep libgdk-x11-2.0.so.0 | cut -d ">" -f 2 | xargs) ./usr/lib/
cp $(ldconfig -p | grep libgtk-x11-2.0.so.0 | cut -d ">" -f 2 | xargs) ./usr/lib/


# Strip binaries.
appdir=$(pwd)
echo "appdir: $appdir"
strip_binaries()
{
  chmod u+w -R "$appdir"
  {
    find $appdir/usr/bin/ -type f -name "gimp*" -print0
    find $appdir/usr/bin/ -type f -name "python*" -print0
    find "$appdir" -type f -regex '.*\.so\(\.[0-9.]+\)?$' -print0
  } | xargs -0 --no-run-if-empty --verbose -n1 strip
}
strip_binaries



GLIBC_NEEDED=$(glibc_needed)
#VERSION=$VER1.glibc$GLIBC_NEEDED
#VERSION=$VER1
echo $VERSION

get_desktopintegration $LOWERAPP
cp -a ../../$LOWERAPP.wrapper ./usr/bin/$LOWERAPP.wrapper
#cp -a ../../desktopintegration ./usr/bin/$LOWERAPP.wrapper
#chmod a+x ./usr/bin/$LOWERAPP.wrapper
#sed -i -e "s|Exec=$LOWERAPP|Exec=$LOWERAPP.wrapper|g" $LOWERAPP.desktop

# Go out of AppImage
cd ..

#exit

echo "Building AppImage..."
pwd

ARCH="x86_64"
#generate_appimage
generate_type2_appimage
